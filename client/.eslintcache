[{"/home/china/code/Hello-World/client/src/index.js":"1","/home/china/code/Hello-World/client/src/screens/LoginScreen.js":"2","/home/china/code/Hello-World/client/src/screens/chat/ChatScreen.js":"3","/home/china/code/Hello-World/client/src/components/NavigationBar.js":"4","/home/china/code/Hello-World/client/src/reportWebVitals.js":"5","/home/china/code/Hello-World/client/src/screens/ProfileScreen.js":"6","/home/china/code/Hello-World/client/src/screens/chat/MessagesPanel.js":"7","/home/china/code/Hello-World/client/src/screens/chat/Message.js":"8","/home/china/code/Hello-World/client/src/screens/HomeScreen.js":"9","/home/china/code/Hello-World/client/src/screens/RegisterScreen.js":"10","/home/china/code/Hello-World/client/src/screens/JoinScreen.js":"11","/home/china/code/Hello-World/client/src/screens/chat/Channel.js":"12","/home/china/code/Hello-World/client/src/screens/chat/ChannelList.js":"13"},{"size":327,"mtime":1613119646708,"results":"14","hashOfConfig":"15"},{"size":2731,"mtime":1613118609458,"results":"16","hashOfConfig":"15"},{"size":2781,"mtime":1613126215748,"results":"17","hashOfConfig":"15"},{"size":1904,"mtime":1613119646708,"results":"18","hashOfConfig":"15"},{"size":362,"mtime":1612244382640,"results":"19","hashOfConfig":"15"},{"size":277,"mtime":1612690822710,"results":"20","hashOfConfig":"15"},{"size":1856,"mtime":1613127181698,"results":"21","hashOfConfig":"15"},{"size":238,"mtime":1613119646828,"results":"22","hashOfConfig":"15"},{"size":3195,"mtime":1613119646708,"results":"23","hashOfConfig":"15"},{"size":2887,"mtime":1613119646708,"results":"24","hashOfConfig":"15"},{"size":2346,"mtime":1613121818318,"results":"25","hashOfConfig":"15"},{"size":290,"mtime":1613126088908,"results":"26","hashOfConfig":"15"},{"size":518,"mtime":1613126097718,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ukkg96",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/china/code/Hello-World/client/src/index.js",[],["59","60"],"/home/china/code/Hello-World/client/src/screens/LoginScreen.js",[],"/home/china/code/Hello-World/client/src/screens/chat/ChatScreen.js",["61","62","63","64"],"\nimport { useEffect, useState, useContext } from \"react\";\nimport { useCookies } from 'react-cookie';\nimport { UserContext } from \"../../App\";\nimport ChannelList from './ChannelList'\nimport MessagesPanel from \"./MessagesPanel\";\nimport './chat.scss';\nimport socketClient  from \"socket.io-client\";\nconst SERVER = \"http://localhost:5000\";\nconst socket = socketClient(SERVER);\n\nconst ChatScreen = ()=> {\n    const [channels, setChannels] = useState([])\n    const [channel, setChannel] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [cookies, setCookie] = useCookies(['user']);\n    \n    const loadChannels = async() =>{\n        fetch(SERVER+'/api/chat/channels/users/'+cookies.user._id).then(async response=>{\n            let data = await response.json();\n            console.log(data);\n            setChannels(data.channels)\n        })\n    }\n    const configureSocket = () =>{\n        \n        console.log(\"socket configs running\");\n        socket.on('connection',()=>{\n            console.log(\"connected id\",socket.id);\n        });\n        /* socket.on('channels', channels => {\n            setChannels(channels);\n        }); */\n        socket.on('newMessage',async data=>{\n            let message = await data;\n            setMessages(oldMessages => [...oldMessages, message]);\n            setChannels(data.channels); \n        })\n    }\n    const handleSendMessage = (channel_id, text) => {\n        console.log(channel_id,text);\n        var body = {\n            userName: cookies.user.username,\n            content: text,\n            channelId: channel_id,\n        } \n        //socket.emit('send-message', { channel_id, text, senderName: socket.id, id: Date.now() });\n        fetch(SERVER+'/api/chat/channels/'+channel_id,{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n    }\n    const handleChannelSelect = (id,name) =>{\n        console.log(\"Joined channel\", id);\n        fetch(SERVER+'/api/chat/channels/'+id).then(async response=>{\n            let data = await response.json();\n            setMessages(data.messages);\n            console.log(data.messages);\n            setChannel({id,name})\n            socket.emit('getChannel',{channelId:id})\n            //setChannels(data.channels)\n        });\n        \n    }\n    useEffect(()=>{\n        loadChannels();\n        configureSocket();\n        console.log(JSON.stringify(cookies));\n    },[])\n    \n    return (\n        <div className=\"chat-app\">\n            <ChannelList channels={channels} onSelectChannel={handleChannelSelect}/>\n            <MessagesPanel onSendMessage={handleSendMessage} messages={messages} channel={channel}/>\n        </div>\n    )\n}\n\nexport default ChatScreen;","/home/china/code/Hello-World/client/src/components/NavigationBar.js",[],"/home/china/code/Hello-World/client/src/reportWebVitals.js",[],["65","66"],"/home/china/code/Hello-World/client/src/screens/ProfileScreen.js",["67","68"],"/home/china/code/Hello-World/client/src/screens/chat/MessagesPanel.js",["69","70"],"/home/china/code/Hello-World/client/src/screens/chat/Message.js",[],"/home/china/code/Hello-World/client/src/screens/HomeScreen.js",[],"/home/china/code/Hello-World/client/src/screens/RegisterScreen.js",[],["71","72"],"/home/china/code/Hello-World/client/src/screens/JoinScreen.js",["73","74"],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Form, Button, Alert, Container } from 'react-bootstrap'\nimport { useCookies } from 'react-cookie';\n\nconst server = \"http://localhost:5000\";\n\nconst JoinScreen = () => {\n  const [name, setName] = useState('');\n  const [channels, setChannels] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [cookies, setCookie] = useCookies(['user']);\n\n  useEffect(() => {\n    const checkPrivate = async () => {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\n        },\n      };\n      try {\n        const { data } = await axios.get(\"/api/chat/channels\", config);\n        setChannels(data.channels)\n      } catch (error) {\n        console.log(error)\n      }\n    };\n    checkPrivate();\n  }, []);\n\n  const joinHandler = async (e) => {\n    e.preventDefault();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\n      },\n    };\n    try {\n      await axios.post(\n        server + \"/api/chat/channels\",\n        { name, userId:cookies.user._id },\n        config\n      ).then((res)=>{console.log(res)});\n  \n    } catch (error) {\n      console.log(error)\n    }\n  };\n  let isTeacher;\n  if (cookies.user.isTeacher) {\n    isTeacher = <Container>\n      <h3>Create a new channel for your students</h3>\n    <Form onSubmit={joinHandler}>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>New Channel</Form.Label>\n        <Form.Control type=\"text\" placeholder=\"Enter name\" onChange={(e) => setName(e.target.value)}\n          value={name} />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Create\n    </Button>\n    </Form>\n    </Container>\n  }else{\n    isTeacher = <div></div>\n  }\n  return error ? (\n    <Alert variant=\"danger\">\n      {error}\n    </Alert>\n  ) : (\n      <div>\n        {channels.map((channel) => (\n          <tr key={channel._id}>\n            <td>{channel.name}</td>\n            <td>{channel.participants}</td>\n          </tr>\n        ))}\n\n        {isTeacher}\n        <Container style={{marginTop: '1em'}}>\n          <h5>Join a Channel!</h5>\n        </Container>\n      </div>\n    );\n};\n\nexport default JoinScreen;","/home/china/code/Hello-World/client/src/screens/chat/Channel.js",[],"/home/china/code/Hello-World/client/src/screens/chat/ChannelList.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":2,"column":31,"nodeType":"81","messageId":"82","endLine":2,"endColumn":41},{"ruleId":"79","severity":1,"message":"83","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":21},{"ruleId":"79","severity":1,"message":"84","line":16,"column":21,"nodeType":"81","messageId":"82","endLine":16,"endColumn":30},{"ruleId":"85","severity":1,"message":"86","line":72,"column":7,"nodeType":"87","endLine":72,"endColumn":9,"suggestions":"88"},{"ruleId":"75","replacedBy":"89"},{"ruleId":"77","replacedBy":"90"},{"ruleId":"79","severity":1,"message":"91","line":4,"column":12,"nodeType":"81","messageId":"82","endLine":4,"endColumn":16},{"ruleId":"79","severity":1,"message":"92","line":4,"column":18,"nodeType":"81","messageId":"82","endLine":4,"endColumn":25},{"ruleId":"79","severity":1,"message":"84","line":7,"column":21,"nodeType":"81","messageId":"82","endLine":7,"endColumn":30},{"ruleId":"93","severity":1,"message":"94","line":36,"column":26,"nodeType":"95","messageId":"96","endLine":36,"endColumn":28},{"ruleId":"75","replacedBy":"97"},{"ruleId":"77","replacedBy":"98"},{"ruleId":"79","severity":1,"message":"99","line":11,"column":17,"nodeType":"81","messageId":"82","endLine":11,"endColumn":25},{"ruleId":"79","severity":1,"message":"84","line":12,"column":19,"nodeType":"81","messageId":"82","endLine":12,"endColumn":28},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'UserContext' is defined but never used.","'setCookie' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies' and 'loadChannels'. Either include them or remove the dependency array.","ArrayExpression",["102"],["100"],["101"],"'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["100"],["101"],"'setError' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [cookies, loadChannels]",{"range":"105","text":"106"},[2488,2490],"[cookies, loadChannels]"]